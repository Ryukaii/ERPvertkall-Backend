generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  engineType    = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  password              String
  name                  String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  isAdmin               Boolean                @default(false)
  isApproved            Boolean                @default(false)
  financialTransactions FinancialTransaction[]
  userPermissions       UserPermission[]

  @@map("users")
}

model Module {
  id              String           @id @default(cuid())
  name            String           @unique
  displayName     String
  description     String?
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userPermissions UserPermission[]

  @@map("modules")
}

model UserPermission {
  id        String   @id @default(cuid())
  userId    String
  moduleId  String
  resource  String
  action    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleId, resource, action])
  @@map("user_permissions")
}

model FinancialCategory {
  id                           String                   @id @default(cuid())
  name                         String                   @unique
  description                  String?
  type                         FinancialTransactionType
  createdAt                    DateTime                 @default(now())
  updatedAt                    DateTime                 @updatedAt
  color                        String?                  @default("#3B82F6")
  icon                         String?
  transactions                 FinancialTransaction[]
  finalPendingTransactions     OfxPendingTransaction[]  @relation("FinalCategory")
  suggestedPendingTransactions OfxPendingTransaction[]  @relation("SuggestedCategory")

  @@map("financial_categories")
}

model PaymentMethod {
  id                           String                  @id @default(cuid())
  name                         String                  @unique
  isActive                     Boolean                 @default(true)
  createdAt                    DateTime                @default(now())
  updatedAt                    DateTime                @updatedAt
  type                         String?                 @default("OTHER")
  transactions                 FinancialTransaction[]
  finalPendingTransactions     OfxPendingTransaction[] @relation("FinalPaymentMethod")
  suggestedPendingTransactions OfxPendingTransaction[] @relation("SuggestedPaymentMethod")
  recurringPayments            RecurringPayment[]

  @@map("payment_methods")
}

model FinancialTransaction {
  id                    String                     @id @default(cuid())
  title                 String
  description           String?
  amount                Int
  dueDate               DateTime?
  paidDate              DateTime?
  type                  FinancialTransactionType
  status                FinancialTransactionStatus @default(PENDING)
  categoryId            String?
  paymentMethodId       String?
  userId                String
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  isRecurring           Boolean                    @default(false)
  originalTransactionId String?
  recurrenceEndDate     DateTime?
  recurrenceFrequency   RecurrenceFrequency?
  recurrenceInterval    Int?
  bankId                String?
  transactionDate       DateTime?
  ofxImportId           String?
  linkedTransactionId   String?
  transferFromBankId    String?
  transferToBankId      String?
  tags                  FinancialTransactionTag[]
  bank                  Bank?                      @relation(fields: [bankId], references: [id], onDelete: Cascade)
  category              FinancialCategory?         @relation(fields: [categoryId], references: [id])
  linkedTransaction     FinancialTransaction?      @relation("LinkedTransactions", fields: [linkedTransactionId], references: [id])
  linkedTransactions    FinancialTransaction[]     @relation("LinkedTransactions")
  ofxImport             OfxImport?                 @relation(fields: [ofxImportId], references: [id], onDelete: Cascade)
  originalTransaction   FinancialTransaction?      @relation("RecurringTransactions", fields: [originalTransactionId], references: [id])
  recurringTransactions FinancialTransaction[]     @relation("RecurringTransactions")
  paymentMethod         PaymentMethod?             @relation(fields: [paymentMethodId], references: [id])
  transferFromBank      Bank?                      @relation("TransferFromBank", fields: [transferFromBankId], references: [id])
  transferToBank        Bank?                      @relation("TransferToBank", fields: [transferToBankId], references: [id])
  user                  User                       @relation(fields: [userId], references: [id])

  // Índices compostos otimizados para consultas frequentes
  @@index([userId, status, dueDate]) // Consultas por usuário + status + data
  @@index([userId, type, transactionDate]) // Relatórios por tipo e período
  @@index([userId, categoryId, status]) // Filtros por categoria
  @@index([bankId, transactionDate]) // Consultas de banco por período
  @@index([userId, dueDate]) // Consultas de vencimento
  @@index([userId, status]) // Consultas por status
  @@index([userId, type]) // Consultas por tipo
  @@index([originalTransactionId]) // Transações recorrentes
  @@index([categoryId]) // Consultas por categoria
  @@index([paymentMethodId]) // Consultas por método de pagamento
  @@index([ofxImportId]) // Consultas de importação OFX
  @@index([transferFromBankId]) // Transferências
  @@index([transferToBankId]) // Transferências
  @@index([linkedTransactionId]) // Transações vinculadas
  
  @@map("financial_transactions")
}

model OfxImport {
  id                    String                  @id @default(cuid())
  fileName              String
  importDate            DateTime                @default(now())
  bankId                String
  status                OfxImportStatus         @default(PROCESSING)
  totalTransactions     Int                     @default(0)
  processedTransactions Int                     @default(0)
  errorMessage          String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  transactions          FinancialTransaction[]
  bank                  Bank                    @relation(fields: [bankId], references: [id], onDelete: Cascade)
  pendingTransactions   OfxPendingTransaction[]

  @@index([bankId, status]) // Consultas por banco e status
  @@index([importDate]) // Consultas por data de importação
  @@map("ofx_imports")
}

model OfxPendingTransaction {
  id                         String                     @id @default(cuid())
  ofxImportId                String
  title                      String
  description                String?
  amount                     Int
  type                       FinancialTransactionType
  transactionDate            DateTime
  fitid                      String?
  trntype                    String?
  checknum                   String?
  memo                       String?
  name                       String?
  suggestedCategoryId        String?
  confidence                 Int?
  finalCategoryId            String?
  createdAt                  DateTime                   @default(now())
  updatedAt                  DateTime                   @updatedAt
  finalPaymentMethodId       String?
  paymentMethodConfidence    Int?
  suggestedPaymentMethodId   String?
  tags                       OfxPendingTransactionTag[]
  finalCategory              FinancialCategory?         @relation("FinalCategory", fields: [finalCategoryId], references: [id])
  finalPaymentMethod         PaymentMethod?             @relation("FinalPaymentMethod", fields: [finalPaymentMethodId], references: [id])
  ofxImport                  OfxImport                  @relation(fields: [ofxImportId], references: [id], onDelete: Cascade)
  suggestedCategory          FinancialCategory?         @relation("SuggestedCategory", fields: [suggestedCategoryId], references: [id])
  suggestedPaymentMethod     PaymentMethod?             @relation("SuggestedPaymentMethod", fields: [suggestedPaymentMethodId], references: [id])

  // Índices compostos otimizados
  @@index([ofxImportId, transactionDate]) // Consultas por importação e data
  @@index([suggestedCategoryId, confidence]) // Categorização por confiança
  @@index([finalCategoryId]) // Consultas por categoria final
  @@index([suggestedPaymentMethodId]) // Consultas por método sugerido
  @@index([finalPaymentMethodId]) // Consultas por método final
  
  @@map("ofx_pending_transactions")
}

model Bank {
  id            String                 @id @default(cuid())
  name          String
  accountNumber String
  accountType   BankAccountType
  balance       Int
  isActive      Boolean                @default(true)
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  document      String
  documentType  BankDocumentType
  holderName    String
  transactions  FinancialTransaction[]
  transfersFrom FinancialTransaction[] @relation("TransferFromBank")
  transfersTo   FinancialTransaction[] @relation("TransferToBank")
  ofxImports    OfxImport[]

  @@index([isActive, document]) // Consultas por status e documento
  @@index([holderName]) // Consultas por titular
  
  @@map("banks")
}

model RecurringPayment {
  id              String         @id @default(cuid())
  title           String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  recurrenceType  RecurrenceType
  paymentMethodId String?
  day             Int?
  month           Int?
  weekday         Int?
  unidadeId       String?
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  unidade         Unidade?       @relation(fields: [unidadeId], references: [id])

  @@map("recurring_payments")
}

model Unidade {
  id                String             @id @default(cuid())
  nome              String
  local             String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  recurringPayments RecurringPayment[]

  @@map("unidades")
}

model Tag {
  id                     String                     @id @default(cuid())
  name                   String                     @unique
  color                  String?
  description            String?
  isActive               Boolean                    @default(true)
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  financialTransactions  FinancialTransactionTag[]
  ofxPendingTransactions OfxPendingTransactionTag[]

  @@index([name, isActive]) // Consultas por nome e status ativo
  @@map("tags")
}

model FinancialTransactionTag {
  id                     String               @id @default(cuid())
  financialTransactionId String
  tagId                  String
  createdAt              DateTime             @default(now())
  financialTransaction   FinancialTransaction @relation(fields: [financialTransactionId], references: [id], onDelete: Cascade)
  tag                    Tag                  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([financialTransactionId, tagId])
  @@index([financialTransactionId, tagId]) // Índice composto para consultas
  @@map("financial_transaction_tags")
}

model OfxPendingTransactionTag {
  id                      String                @id @default(cuid())
  ofxPendingTransactionId String
  tagId                   String
  createdAt               DateTime              @default(now())
  ofxPendingTransaction   OfxPendingTransaction @relation(fields: [ofxPendingTransactionId], references: [id], onDelete: Cascade)
  tag                     Tag                   @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([ofxPendingTransactionId, tagId])
  @@index([ofxPendingTransactionId, tagId]) // Índice composto para consultas
  @@map("ofx_pending_transaction_tags")
}

enum FinancialTransactionType {
  RECEIVABLE
  PAYABLE
  CREDIT
  DEBIT
  TRANSFER
}

enum FinancialTransactionStatus {
  PENDING
  PAID
  OVERDUE
  CONFIRMED
  CANCELLED
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
  FORTNIGHTLY
  BIMONTHLY
  UNTIL_END_OF_YEAR
}

enum BankAccountType {
  CHECKING
  SAVINGS
  INVESTMENT
  CREDIT
}

enum BankDocumentType {
  CPF
  CNPJ
}

enum OfxImportStatus {
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  PENDING
  PENDING_REVIEW
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  ANNUAL
}

import { PrismaClient, FinancialTransactionType } from '@prisma/client';

const prisma = new PrismaClient();

const defaultCategories = [
  // Categorias de Receitas (RECEIVABLE)
  {
    name: 'Vendas',
    description: 'Receitas provenientes de vendas de produtos ou servi√ßos',
    type: FinancialTransactionType.RECEIVABLE,
  },
  {
    name: 'Comiss√µes',
    description: 'Comiss√µes recebidas por vendas ou servi√ßos',
    type: FinancialTransactionType.RECEIVABLE,
  },
  {
    name: 'Investimentos',
    description: 'Rendimentos de investimentos e aplica√ß√µes financeiras',
    type: FinancialTransactionType.RECEIVABLE,
  },
  {
    name: 'Empr√©stimos Recebidos',
    description: 'Empr√©stimos e financiamentos recebidos',
    type: FinancialTransactionType.RECEIVABLE,
  },
  {
    name: 'Freelance',
    description: 'Trabalhos freelancer e servi√ßos prestados',
    type: FinancialTransactionType.RECEIVABLE,
  },
  {
    name: 'Aluguel Recebido',
    description: 'Receitas de aluguel de im√≥veis ou bens',
    type: FinancialTransactionType.RECEIVABLE,
  },
  {
    name: 'Outras Receitas',
    description: 'Outras receitas n√£o categorizadas',
    type: FinancialTransactionType.RECEIVABLE,
  },

  // Categorias de Despesas (PAYABLE)
  {
    name: 'Alimenta√ß√£o',
    description: 'Gastos com alimenta√ß√£o, refei√ß√µes e lanches',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Transporte',
    description: 'Combust√≠vel, transporte p√∫blico, Uber, etc.',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Moradia',
    description: 'Aluguel, condom√≠nio, IPTU, manuten√ß√£o',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Sa√∫de',
    description: 'Plano de sa√∫de, medicamentos, consultas',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Educa√ß√£o',
    description: 'Cursos, livros, material escolar',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Lazer',
    description: 'Entretenimento, viagens, hobbies',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Servi√ßos',
    description: 'Internet, telefone, streaming, assinaturas',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Impostos',
    description: 'Impostos e taxas governamentais',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Vestu√°rio',
    description: 'Roupas, cal√ßados, acess√≥rios',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Manuten√ß√£o',
    description: 'Reparos, manuten√ß√£o de ve√≠culos e equipamentos',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Seguros',
    description: 'Seguros de vida, ve√≠culo, resid√™ncia',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Empr√©stimos',
    description: 'Presta√ß√µes de empr√©stimos e financiamentos',
    type: FinancialTransactionType.PAYABLE,
  },
  {
    name: 'Outras Despesas',
    description: 'Outras despesas n√£o categorizadas',
    type: FinancialTransactionType.PAYABLE,
  },
];

async function seedCategories() {
  console.log('üå± Iniciando seed de categorias...');

  for (const category of defaultCategories) {
    try {
      const existingCategory = await prisma.financialCategory.findUnique({
        where: { name: category.name },
      });

      if (!existingCategory) {
        await prisma.financialCategory.create({
          data: category,
        });
        console.log(`‚úÖ Categoria criada: ${category.name}`);
      } else {
        console.log(`‚è≠Ô∏è  Categoria j√° existe: ${category.name}`);
      }
    } catch (error) {
      console.error(`‚ùå Erro ao criar categoria ${category.name}:`, error);
    }
  }

  console.log('üéâ Seed de categorias conclu√≠do!');
}

async function main() {
  await seedCategories();
  await prisma.$disconnect();
}

main().catch((error) => {
  console.error('‚ùå Erro no seed:', error);
  process.exit(1);
}); 
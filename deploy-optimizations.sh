#!/bin/bash

# Script de Deploy das Otimiza√ß√µes de Performance
# Execute este script para aplicar todas as otimiza√ß√µes

set -e

echo "üöÄ Iniciando deploy das otimiza√ß√µes de performance..."

# =====================================================
# 1. VERIFICAR CONFIGURA√á√ïES
# =====================================================

echo "üìã Verificando configura√ß√µes..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    echo "‚ùå Erro: Execute este script no diret√≥rio raiz do projeto"
    exit 1
fi

# Verificar se o Heroku CLI est√° instalado
if ! command -v heroku &> /dev/null; then
    echo "‚ùå Erro: Heroku CLI n√£o est√° instalado"
    echo "Instale em: https://devcenter.heroku.com/articles/heroku-cli"
    exit 1
fi

# =====================================================
# 2. BACKUP ANTES DO DEPLOY
# =====================================================

echo "üíæ Criando backup das configura√ß√µes atuais..."

# Backup do package.json
cp package.json package.json.backup

# Backup das configura√ß√µes do Prisma
cp src/config/prisma.service.ts src/config/prisma.service.ts.backup

echo "‚úÖ Backup criado com sucesso"

# =====================================================
# 3. APLICAR OTIMIZA√á√ïES NO C√ìDIGO
# =====================================================

echo "üîß Aplicando otimiza√ß√µes no c√≥digo..."

# Verificar se as otimiza√ß√µes j√° foram aplicadas
if grep -q "findManyOptimized" src/config/prisma.service.ts; then
    echo "‚úÖ Otimiza√ß√µes j√° aplicadas no c√≥digo"
else
    echo "‚ùå Otimiza√ß√µes n√£o encontradas no c√≥digo"
    echo "Execute as otimiza√ß√µes manuais primeiro"
    exit 1
fi

# =====================================================
# 4. TESTES LOCAIS
# =====================================================

echo "üß™ Executando testes locais..."

# Verificar se o TypeScript compila
echo "üìù Verificando compila√ß√£o TypeScript..."
npm run build

if [ $? -eq 0 ]; then
    echo "‚úÖ Compila√ß√£o TypeScript bem-sucedida"
else
    echo "‚ùå Erro na compila√ß√£o TypeScript"
    exit 1
fi

# =====================================================
# 5. DEPLOY NO HEROKU
# =====================================================

echo "üöÄ Fazendo deploy no Heroku..."

# Verificar se h√° mudan√ßas para commitar
if git diff --quiet; then
    echo "üìù Nenhuma mudan√ßa para commitar"
else
    echo "üìù Commitando mudan√ßas..."
    git add .
    git commit -m "feat: Apply performance optimizations for Supabase

- Optimize PrismaService connection pooling
- Add pagination to all list endpoints
- Implement selective field queries
- Add retry logic for database operations
- Reduce connection limit from 5 to 3
- Add session timeouts for better stability"
fi

# Push para o Heroku
echo "üöÄ Fazendo push para o Heroku..."
git push heroku main

if [ $? -eq 0 ]; then
    echo "‚úÖ Deploy no Heroku bem-sucedido"
else
    echo "‚ùå Erro no deploy do Heroku"
    exit 1
fi

# =====================================================
# 6. VERIFICAR DEPLOY
# =====================================================

echo "üîç Verificando deploy..."

# Aguardar um pouco para o deploy finalizar
sleep 10

# Verificar logs
echo "üìã Verificando logs do Heroku..."
heroku logs --tail --num 50 | grep -E "(Slow query|Connection pool|Database connected|Error)" || true

# =====================================================
# 7. APLICAR √çNDICES NO SUPABASE
# =====================================================

echo "üóÑÔ∏è Aplicando √≠ndices no Supabase..."

echo "‚ö†Ô∏è  IMPORTANTE: Execute os scripts SQL no Supabase Dashboard"
echo ""
echo "üìã Script 1 - Otimiza√ß√µes Gerais:"
echo "üìÅ Arquivo: optimize-database.sql"
echo "üìç Localiza√ß√£o: SQL Editor > New Query"
echo ""
echo "üìã Script 2 - Corre√ß√µes do Database Linter:"
echo "üìÅ Arquivo: supabase-performance-fixes.sql"
echo "üìç Localiza√ß√£o: SQL Editor > New Query"
echo ""
echo "üìã Passos:"
echo "1. Acesse o Supabase Dashboard"
echo "2. V√° para SQL Editor"
echo "3. Crie uma nova query"
echo "4. Cole o conte√∫do do arquivo optimize-database.sql"
echo "5. Execute o script"
echo "6. Crie outra query"
echo "7. Cole o conte√∫do do arquivo supabase-performance-fixes.sql"
echo "8. Execute o script"
echo ""

# =====================================================
# 8. VERIFICA√á√ÉO FINAL
# =====================================================

echo "‚úÖ Deploy das otimiza√ß√µes conclu√≠do!"
echo ""
echo "üìä Pr√≥ximos passos para monitoramento:"
echo ""
echo "1. Monitorar logs:"
echo "   heroku logs --tail | grep 'Slow query'"
echo ""
echo "2. Verificar performance no Supabase:"
echo "   Dashboard > Analytics > Query Performance"
echo ""
echo "3. Testar endpoints:"
echo "   - GET /financial-transactions"
echo "   - GET /bancos/{id}/transactions"
echo ""
echo "4. Verificar m√©tricas esperadas:"
echo "   - Tempo de consulta: 20-100ms (antes: 100-500ms)"
echo "   - Conex√µes ativas: m√°ximo 3"
echo "   - Queries lentas: < 500ms"
echo ""

# =====================================================
# 9. ROLLBACK (se necess√°rio)
# =====================================================

echo "üîÑ Para fazer rollback (se necess√°rio):"
echo "1. Restaurar backup: cp package.json.backup package.json"
echo "2. Restaurar PrismaService: cp src/config/prisma.service.ts.backup src/config/prisma.service.ts"
echo "3. Fazer novo deploy: git push heroku main"
echo ""

echo "üéâ Otimiza√ß√µes aplicadas com sucesso!" 